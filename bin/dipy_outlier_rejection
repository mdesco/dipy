#! /usr/bin/env pythonw

import os
import itertools
from os.path import join as pjoin

import numpy as np
import nibabel as nib

from dipy.fixes import argparse

from dipy.segment.clustering import Cluster
from dipy.segment.clustering import compute_outlierness

from dipy.data import fetch_viz_icons
from dipy.data.fetcher import dipy_home
if not os.path.isdir(pjoin(dipy_home, 'icons')):
    fetch_viz_icons()


def build_args_parser():
    description = "Detect tractography outliers in a tractogram."
    p = argparse.ArgumentParser(description=description)

    p.add_argument("tractogram", help="File containing streamlines (.trk).")

    p.add_argument("--thresholds", type=float, nargs="*",
                   help="Reject streamlines having an outlierness score above this/these threshold(s), "
                        "e.g. \"0.6 0.7 0.8\". "
                        "Default: set it manually through an interactive display.")

    p.add_argument("--out", default="./",
                   help="Output dir where to save all the files. Default: './'")

    p.add_argument("--inliers", help="Filename where to save tractography intliers (.trk)."
                   "Default: append '_inliers' to the tractogram filename")
    p.add_argument("--outliers", help="Filename where to save tractography outliers (.trk)."
                   "Default: append '_outliers' to the tractogram filename")
    p.add_argument("--outlierness", help="Filename where to save the outlierness scores (.csv).")
    p.add_argument("--histogram", help="Filename where to save the histogram (.png).")

    p.add_argument("--confidence_level", type=float, default=0.95,
                   help="Confidence level controlling the number of orderings. Default: 0.95")

    p.add_argument("--seed", type=int, default=1234, help="Seed used to shuffle orderings. Default: 1234")
    p.add_argument('-v', "--verbose", action="store_true",
                   help="Enable verbose mode.")

    return p


def load_tractogram(filename):
    streams, hdr = nib.trackvis.read(filename)
    streamlines, colors, properties = zip(*streams)
    return streamlines, colors, properties, hdr


def save_tractogram(filename, streamlines, colors, properties, hdr):
    data = itertools.izip_longest(streamlines, colors, properties)
    nib.trackvis.write(filename.split(".trk")[0] + ".trk", data, hdr)


def append_text_to_filename(filename, text):
    path, ext = os.path.splitext(filename)
    return path + text + ext


def create_hist(outlierness, colormap_name="jet"):
    import pylab as plt
    # Make histogram plot prettier.
    plt.rcParams['font.size'] = 24
    #plt.rcParams['font.weight'] = "bold"
    fig = plt.figure(figsize=(16, 4), dpi=300)
    ax = fig.add_subplot(111)
    #ax.set_title('Outlierness', fontsize="32", fontweight="bold")
    #ax.set_ylabel('Outlierness', fontsize="24")
    #n, bins, patches = ax.hist(outlierness, bins=np.linspace(0, 1, 101), linewidth=0.2, orientation="horizontal")
    n, bins, patches = ax.hist(outlierness, bins=np.linspace(0, 1, 101), linewidth=0)

    # Apply colormap to histogram.
    cm = plt.cm.get_cmap(colormap_name)
    bin_centers = 0.5 * (bins[:-1] + bins[1:])
    # scale values to interval [0,1]
    col = bin_centers - min(bin_centers)
    col /= max(col)

    for c, p in zip(col, patches):
        plt.setp(p, 'facecolor', cm(c))

    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    return fig


def create_hist_actor(outlierness, colormap_name="jet"):
    import vtk
    from dipy.viz import actor, utils

    import pylab as plt
    if not hasattr(plt, 'style'):
        print "Use Matplotlib >= 1.4 to have better colormap."
    else:
        plt.style.use('dark_background')

    fig = create_hist(outlierness, colormap_name)
    fig.gca().set_title("")
    arr = utils.matplotlib_figure_to_numpy(fig, dpi=300, transparent=False)
    figure_actor = actor.figure(arr, size=100, interpolation='linear')

    # Make sure the figure is center is in the middle of the image.
    transform = vtk.vtkTransform()
    transform.Translate(-np.array(figure_actor.GetCenter()))
    figure_actor.SetUserMatrix(transform.GetMatrix())
    return figure_actor, fig


def interactive_outlier_rejection(streamlines, outlierness, tractogram_filename, outdir, hdr):
    import vtk
    from dipy.viz import fvtk, actor, window, widget
    from dipy.data.fetcher import read_viz_icons

    colormap_name = "jet"
    stream_actor = actor.line(streamlines, colors=fvtk.create_colormap(outlierness, name=colormap_name))
    stream_actor.SetPosition(-np.array(stream_actor.GetCenter()))

    global threshold
    threshold = 0.8

    streamlines_color = np.zeros(len(streamlines), dtype="float32")
    streamlines_color[outlierness < threshold] = 1
    streamlines_color[outlierness >= threshold] = 0

    lut = vtk.vtkLookupTable()
    lut.SetNumberOfTableValues(2)
    lut.Build()
    lut.SetTableValue(0, tuple(fvtk.colors.orange_red) + (1,))
    lut.SetTableValue(1, tuple(fvtk.colors.green) + (1,))
    lut.SetTableRange(0, 1)

    stream_split_actor = actor.line(streamlines, colors=streamlines_color, lookup_colormap=lut)
    stream_split_actor.SetPosition(-np.array(stream_split_actor.GetCenter()))
    hist_actor, hist_fig = create_hist_actor(outlierness, colormap_name=colormap_name)

    # Main renderder
    bg = (0, 0, 0)
    global screen_size
    screen_size = (0, 0)
    ren_main = window.Renderer()
    ren_main.background(bg)
    show_m = window.ShowManager(ren_main, size=(1066, 600), interactor_style="trackball")
    show_m.window.SetNumberOfLayers(2)
    ren_main.SetLayer(1)
    ren_main.InteractiveOff()

    # Outlierness renderer
    ren_outlierness = window.Renderer()
    show_m.window.AddRenderer(ren_outlierness)
    ren_outlierness.background(bg)
    ren_outlierness.SetViewport(0, 0.3, 0.5, 1)
    ren_outlierness.add(stream_actor)
    ren_outlierness.reset_camera_tight()

    ren_split = window.Renderer()
    show_m.window.AddRenderer(ren_split)
    ren_split.background(bg)
    ren_split.SetViewport(0.5, 0.3, 1, 1)
    ren_split.add(stream_split_actor)
    ren_split.SetActiveCamera(ren_outlierness.GetActiveCamera())

    # Histogram renderer
    ren_hist = window.Renderer()
    show_m.window.AddRenderer(ren_hist)
    ren_hist.projection("parallel")
    ren_hist.background(bg)
    ren_hist.SetViewport(0, 0, 1, 0.3)
    ren_hist.add(hist_actor)
    ren_hist.SetInteractive(False)

    def apply_threshold(obj, evt):
        global threshold
        new_threshold = np.round(obj.GetSliderRepresentation().GetValue(), decimals=2)
        obj.GetSliderRepresentation().SetValue(new_threshold)
        if threshold != new_threshold:
            threshold = new_threshold

            streamlines_color = np.zeros(len(streamlines), dtype=np.float32)
            streamlines_color[outlierness < threshold] = 1
            streamlines_color[outlierness >= threshold] = 0

            colors = []
            for color, streamline in zip(streamlines_color, streamlines):
                colors += [color] * len(streamline)

            scalars = stream_split_actor.GetMapper().GetInput().GetPointData().GetScalars()
            for i, c in enumerate(colors):
                scalars.SetValue(i, c)

            scalars.Modified()

    threshold_slider_rep = vtk.vtkSliderRepresentation3D()
    threshold_slider_rep.SetMinimumValue(0.)
    threshold_slider_rep.SetMaximumValue(1.)
    threshold_slider_rep.SetValue(threshold)
    threshold_slider_rep.SetLabelFormat("%0.2lf")
    threshold_slider_rep.SetLabelHeight(0.02)
    threshold_slider_rep.GetPoint1Coordinate().SetCoordinateSystemToWorld()
    x1, x2, y1, y2, z1, z2 = hist_actor.GetBounds()
    threshold_slider_rep.GetPoint1Coordinate().SetValue(x1*1., y1-5, 0)
    threshold_slider_rep.GetPoint2Coordinate().SetCoordinateSystemToWorld()
    threshold_slider_rep.GetPoint2Coordinate().SetValue(x2*1., y1-5, 0)
    threshold_slider_rep.SetEndCapLength(0.)
    threshold_slider_rep.SetEndCapWidth(0.)

    threshold_slider = vtk.vtkSliderWidget()
    threshold_slider.SetInteractor(show_m.iren)
    threshold_slider.SetRepresentation(threshold_slider_rep)
    threshold_slider.SetCurrentRenderer(ren_hist)
    threshold_slider.SetAnimationModeToJump()
    threshold_slider.EnabledOn()

    threshold_slider.AddObserver("InteractionEvent", apply_threshold)

    # Add a saveall button.
    def button_save_callback(obj, event):
        inliers = [s for s, keep in zip(streamlines, outlierness < threshold) if keep]
        outliers = [s for s, keep in zip(streamlines, outlierness >= threshold) if keep]

        basename = os.path.splitext(os.path.basename(tractogram_filename))[0]
        print outdir, basename
        filename = pjoin(outdir, basename + "_inliers" + ".trk")
        save_tractogram(filename, inliers, [], [], hdr)
        print('Inliers saved in: ' + filename)

        filename = pjoin(outdir, basename + "_outliers" + ".trk")
        save_tractogram(filename, outliers, [], [], hdr)
        print('Outliers saved in: ' + filename)

        filename = pjoin(outdir, basename + "_outlierness" + ".csv")
        np.savetxt(filename, outlierness, delimiter=",")
        print('Outlierness scores saved in: ' + filename)

        filename = pjoin(outdir, basename + "_histogramm" + ".png")
        fig = create_hist(outlierness, colormap_name="jet")
        fig.savefig(filename, dpi=300, transparent=False, bbox_inches='tight', pad_inches=0.)
        print('Histogram saved in: ' + filename)

    # Create save buttons
    button_png = read_viz_icons(fname='floppy-disk.png')
    save_button = widget.button(show_m.iren, ren_main,
                                button_save_callback,
                                button_png, (.99, .05), (30, 30))

    #ren_main
    def _place_buttons():
        sz = 30.0
        width, _ = ren_main.GetSize()

        bds = np.zeros(6)
        bds[0] = width - sz - 5
        bds[1] = bds[0] + sz
        bds[2] = 5
        bds[3] = bds[2] + sz
        bds[4] = bds[5] = 0.0
        save_button.GetRepresentation().PlaceWidget(bds)

    def _window_callback(obj, event):
        ren_hist.reset_camera_tight(margin_factor=1.2)
        _place_buttons()

    show_m.add_window_callback(_window_callback)
    show_m.initialize()
    show_m.render()
    show_m.start()

    inliers = [s for s, keep in zip(streamlines, outlierness < threshold) if keep]
    outliers = [s for s, keep in zip(streamlines, outlierness >= threshold) if keep]
    return inliers, outliers


def get_inliers_and_outliers(streamlines, outlierness, threshold):
    """ Extracts inliers and outliers streamlines based on their outlierness.

    Parameters
    ----------
    streamlines : list of ndarray
        Streamlines being filtered based on their outlierness.
    outlierness : list of float
        Scalars between 0 and 1 representing the tendency of each streamline
        at being an outlier.
    threshold : float
        Scalar that determines if a streamline is an outlier (i.e. its
        outlierness is above this value) or an inlier (i.e. its outlierness
        is below or equals to that value).

    Returns
    -------
    inliers : :class:`dipy.segment.clustering.Cluster` object
        Streamlines that have an outlierness below or equals to the given threshold.
    outliers : :class:`dipy.segment.clustering.Cluster` object
        Streamlines that have an outlierness above to the given threshold.
    """
    indices = np.arange(len(streamlines))
    inliers = Cluster(indices=indices[outlierness <= threshold], refdata=streamlines)
    outliers = Cluster(indices=indices[outlierness > threshold], refdata=streamlines)
    return inliers, outliers


def main():
    parser = build_args_parser()
    args = parser.parse_args()

    streamlines, colors, properties, hdr = load_tractogram(args.tractogram)

    outlierness = compute_outlierness(streamlines, confidence=args.confidence_level,
                                      seed=args.seed, verbose=args.verbose)

    # Create output folder, if needed.
    try:
        os.mkdir(args.out)
    except OSError:
        pass

    if args.thresholds is None:
        inliers, outliers = interactive_outlier_rejection(streamlines, outlierness, args.tractogram, args.out, hdr)
        return

    # Save outlierness and the histogram.
    if args.outlierness is not None:
        np.savetxt(pjoin(args.out, args.outlierness.split(".csv")[0] + ".csv"), outlierness, delimiter=",")

    if args.histogram is not None:
        fig = create_hist(outlierness, colormap_name="jet")
        fig.savefig(pjoin(args.out, args.histogram.split(".png")[0] + ".png"), dpi=300, transparent=False, bbox_inches='tight', pad_inches=0.)

    for threshold in args.thresholds:
        print "Saving results for threshold: {0}".format(threshold)
        inliers, outliers = get_inliers_and_outliers(streamlines, outlierness, threshold)

        # Save inliers and outliers for the current threshold.
        inliers_filename = append_text_to_filename(args.tractogram, "_inliers_{0}".format(threshold))
        if args.inliers is not None:
            inliers_filename = args.inliers.split(".trk")[0] + "_" + str(threshold) + ".trk"

        save_tractogram(pjoin(args.out, inliers_filename), inliers, [], [], hdr)

        outliers_filename = append_text_to_filename(args.tractogram, "_outliers_{0}".format(threshold))
        if args.outliers is not None:
            outliers_filename = args.outliers.split(".trk")[0] + "_" + str(threshold) + ".trk"

        save_tractogram(pjoin(args.out, outliers_filename), outliers, [], [], hdr)


if __name__ == "__main__":
    main()
